func_gui.h
typedef struct{
    u32 res_addr;           //资源地址
    u16 x1;                 //截取图片在资源中的坐标
    u16 y1;
    u16 x2;                 //截取图片显示的位置
    u16 y2;
    u16 width;              //截取的图片长宽
    u16 height;
}widget_para_t;
func_gremind.c
const func_t func_tbl[FUNC_MAX] = {
	[FUNC_GCLOCK]	= lcd_gclock_init,		//[FUNC_MENU_LIST]	= lcd_menu_init,
void func_run(void){
	func_cb.sta = FUNC_GCLOCK;
	func_gclock();		//func_menu_list();
void *lcd_lang_init(int x, int y){
    void *page_ptr = gui_create_backpage(x, y, 1);
    glang_menu_item_cb.page_list = compo_list_create(page_ptr, LCD_WIDTH_SIZE, LCD_HEIGHT_SIZE - LANG_TOP_POS);
    compo_list_init(&glang_menu_item_cb, LANG_LINE_HEIGHT, LANG_TOP_POS, LANG_BOTTOM_POS, LANG_TOP_POS, MENU_ITEM_ROLL_SPEED);
    void *p_icon = load_res_img(UI_BUF_MIX_13_13_BIN);	//正方形框
    compo_list_set_lineheight(LANG_LINE_HEIGHT);

    void *text[5];
    for (int i = 0; i < LANG_SUB_NUM; i++) {
        void *item = compo_list_item_create(page_ptr, glang_menu_item_cb.page_list, LANG_TOP_POS);
        compo_list_item_set_icon(item, p_icon, 0, 0, 13, 13, 190);
        img_gui[0][i] = compo_list_item_set_icon(item, p_icon, 13, 0, 13, 13, 190);
        if (i != gui_cb.lang) {
            widget_set_visible(img_gui[0][i], false);
        }
        if (!sys_cb.gui_exit) {
            widget_button_set_callback(item, NULL, &glang_btn_release_callback ,NULL, i);
        }

        text[i] = widget_creat(item, WGT_TYPE_TXT);
        gui_text_set_content(text[i], CHINESE_STR + i, 25, 17, TEXT_DESC_COLOR, TEXT_BACK_COLOR, gui_cb.lang, false);
    }
    widget_page_set_callback(page_ptr, NULL, &glang_touch_release_callback, &glang_list_touch_move_callback);
	
    y_pos = compo_list_check_y(&glang_menu_item_cb, y_pos);
#if 0
	compo_list_scroll_create(LIST_SILDER_X, LIST_SILDER_Y, LIST_SILDER_WIDTH, LIST_SILDER_HEIGHT);	//滚动条显示在最上层
	compo_list_scrool_set_tout(3000);
	list_scroll_update(y_pos);
#endif
    void *rect_ptr = widget_creat(page_ptr, WGT_TYPE_RECT);	//上帘黑底
    widget_rectangle_set(rect_ptr, 0, 0, LCD_WIDTH_SIZE, LANG_TOP_RECT, COLOR_BLACK, 1);

	void *text_gui = widget_creat(page_ptr, WGT_TYPE_TXT);
    gui_text_set_content(text_gui, LANGUAGE_STR, TEXT_DESC_X, TEXT_DESC_Y, TEXT_DESC_COLOR, TEXT_BACK_COLOR, gui_cb.lang, false);
						 
    gui_clock_init(page_ptr);
    widget_set_visible(page_ptr, true);
    gui_refresh();
    return page_ptr;
}	
    void *img = widget_creat(page_ptr, WGT_TYPE_IMG);
    gui_widget_set(img, &camera_para[1], WGT_TYPE_IMG);

	widget_para_t chick_para = {UI_BUF_COMMON_NULL_BIN, 0, 0, 5, 180, 200, 30};
	void *btn;
    btn = widget_creat(page_ptr, WGT_TYPE_BTN);
    gui_widget_set(btn, &chick_para, WGT_TYPE_BTN);
    widget_button_set_callback(btn, NULL, &release_callback, NULL, 0);
	
	widget_page_set_callback(page_ptr, NULL, &timeset_page_release_callback, &timeset_page_move_callback);

MSG_SYS_1S
void func_sport_col_message(u16 msg){
    switch (msg) {
    case EVT_SEC_UPDATE:
        if (!sys_cb.gui_exit) {
            char num_timing[9];
            sprintf(num_timing, "%02d:%02d:%02d", gui_cb.hour_cnt[TIM_1],
                    gui_cb.min_cnt[TIM_1], gui_cb.sec_cnt[TIM_1]);
            widget_num_set_content(num_gui[0][6], num_timing, 32, SPORT_COL_TIM_Y, 22, 33, false);
            gui_refresh();
        }
        break;
    default:
        func_message(msg);
        break;
    }
}
void func_sport_col(void){
    func_sport_col_enter();
    while (func_cb.sta == FUNC_GSPORT_COL) {
        func_sport_col_process();
        func_sport_col_message(msg_dequeue());
    }
    func_sport_col_exit();
}
